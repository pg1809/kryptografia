/**
 * Laboratorium, pon. godz 14.15
 * Zestaw nr 3
 *
 * Łukasz Cyran - 180519
 * Piotr Grzelak - 180553
 * Wojciech Szałapski - 180706
 */
package kryptografia.gui;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import kryptografia.pk.onetimepad.AlgorithmOTP;
import kryptografia.pk.onetimepad.IAlgorithm;

public class AlgorithmGUI extends javax.swing.JFrame {

    /**
     * Creates new form AlgorithmGUI
     */
    public AlgorithmGUI() {
        initComponents();
        setTitle("One-time pad 6000");
        algorithm = new AlgorithmOTP();

        jTextAreaInputText.setLineWrap(true);
        jTextAreaOutputText.setLineWrap(true);
    }

    /**
     * Pozwól użytkownikowi wybrać plik i zwróć informacje o tym pliku.
     *
     * @return Informacje o pełnej nazwie pliku oraz jego zawartości.
     * @throws FileNotFoundException
     * @throws IOException
     */
    private FileContent retrieveFileContent() throws FileNotFoundException, IOException {
        FileContent result = new FileContent();

        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            result.setFilePath(file.getParent());
            result.setFileName(FilenameUtils.getBaseName(file.getAbsolutePath()));
            result.setFileExtension(FilenameUtils.getExtension(file.getAbsolutePath()));

            FileInputStream fis = new FileInputStream(file);
            byte[] binaryContent = new byte[(int) file.length()];
            fis.read(binaryContent);

            result.setBinaryConent(binaryContent);
            return result;
        }

        return null;
    }

    /**
     * Pozwól użytkownikowi wybrać plik i zapisz bajty do niego.
     *
     * @param byteArray Tablica bajtów do zapisania
     * @throws IOException
     */
    private void saveByteArrayToFile(byte[] byteArray) throws IOException {
        JFileChooser chooser = new JFileChooser();
        int returnVal = chooser.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            File file = chooser.getSelectedFile();
            FileUtils.writeByteArrayToFile(file, byteArray);
            JOptionPane.showMessageDialog(this, "Pomyślnie zapisano plik");
        }
    }

    /**
     * Wczytaj klucz ze wskazanego przez użytkownika pliku.
     *
     * @return true wtedy i tylko wtedy, gdy udało się wczytać klucz
     */
    private boolean loadKey() {
        JOptionPane.showMessageDialog(this, "Proszę wskazać plik zawierający klucz");

        try {
            FileContent keyFileContent = retrieveFileContent();
            if (keyFileContent == null) {
                return false;
            }

            byte[] binaryKeyFileContent = keyFileContent.getBinaryConent();
            algorithm.setKey(binaryKeyFileContent);
            JOptionPane.showMessageDialog(this, "Pomyślnie wczytano klucz");
        } catch (IOException ex) {
            Logger.getLogger(AlgorithmGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Wystąpił błąd podczas wczytywania klucza");
            return false;
        }

        return true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        encryptedTextArea1 = new kryptografia.gui.EncryptedTextArea();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaInputText = new javax.swing.JTextArea();
        jButtonEncryptFile = new javax.swing.JButton();
        jButtonDecryptFile = new javax.swing.JButton();
        jButtonEncryptText = new javax.swing.JButton();
        jButtonDecryptText = new javax.swing.JButton();
        jLabelOutputText = new javax.swing.JLabel();
        jLabelInputText = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextAreaOutputText = new kryptografia.gui.EncryptedTextArea();

        encryptedTextArea1.setColumns(20);
        encryptedTextArea1.setRows(5);
        jScrollPane2.setViewportView(encryptedTextArea1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTextAreaInputText.setColumns(20);
        jTextAreaInputText.setRows(5);
        jScrollPane1.setViewportView(jTextAreaInputText);

        jButtonEncryptFile.setText("Szyfruj plik");
        jButtonEncryptFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEncryptFileActionPerformed(evt);
            }
        });

        jButtonDecryptFile.setText("Deszyfruj plik");
        jButtonDecryptFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecryptFileActionPerformed(evt);
            }
        });

        jButtonEncryptText.setText("Szyfruj tekst");
        jButtonEncryptText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEncryptTextActionPerformed(evt);
            }
        });

        jButtonDecryptText.setText("Deszyfruj tekst");
        jButtonDecryptText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDecryptTextActionPerformed(evt);
            }
        });

        jLabelOutputText.setText("Wyjście");

        jLabelInputText.setText("Wejście");

        jTextAreaOutputText.setColumns(20);
        jTextAreaOutputText.setRows(5);
        jScrollPane4.setViewportView(jTextAreaOutputText);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 10, Short.MAX_VALUE)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabelInputText)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelOutputText)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(27, 27, 27)
                                        .addComponent(jButtonEncryptText)
                                        .addGap(91, 91, 91)
                                        .addComponent(jButtonDecryptText)))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(28, 28, 28)
                        .addComponent(jButtonEncryptFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonDecryptFile)
                        .addGap(50, 50, 50))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonEncryptFile)
                    .addComponent(jButtonDecryptFile))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                .addComponent(jLabelInputText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonEncryptText)
                    .addComponent(jButtonDecryptText))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabelOutputText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonEncryptTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEncryptTextActionPerformed
        byte[] bytesToEncrypt = jTextAreaInputText.getText().getBytes();
        byte[] encryptedBytes = algorithm.encrypt(bytesToEncrypt);

        jTextAreaOutputText.setText(new String(encryptedBytes));
        jTextAreaOutputText.setInternalBuffer(encryptedBytes);

        try {
            JOptionPane.showMessageDialog(this, "Wybierz gdzie zapisać klucz");
            saveByteArrayToFile(algorithm.getKey());
            algorithm.setKey(null);
        } catch (IOException ex) {
            Logger.getLogger(AlgorithmGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Wystąpił błąd podczas zapisu klucza");
        }
    }//GEN-LAST:event_jButtonEncryptTextActionPerformed

    private void jButtonEncryptFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEncryptFileActionPerformed
        FileContent fileContent;
        try {
            fileContent = retrieveFileContent();
            if (fileContent == null) {
                return;
            }

            File outputFile = new File(fileContent.getFilePath() + "/"
                    + fileContent.getFileName() + "_encrypted." + fileContent.getFileExtension());

            FileUtils.writeByteArrayToFile(outputFile, algorithm.encrypt(fileContent.getBinaryConent()));
        } catch (IOException ex) {
            Logger.getLogger(AlgorithmGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Wystąpił błąd podczas wczytywania pliku");
        }

        try {
            JOptionPane.showMessageDialog(this, "Wybierz gdzie zapisać klucz");
            saveByteArrayToFile(algorithm.getKey());
            algorithm.setKey(null);
        } catch (IOException ex) {
            Logger.getLogger(AlgorithmGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Wystąpił błąd podczas zapisu klucza");
        }
    }//GEN-LAST:event_jButtonEncryptFileActionPerformed

    private void jButtonDecryptTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecryptTextActionPerformed
        if (!loadKey()) {
            return;
        }

        byte[] bytesToDecrypt = jTextAreaOutputText.getInternalBuffer();
        jTextAreaInputText.setText(new String(algorithm.decrypt(bytesToDecrypt)));
    }//GEN-LAST:event_jButtonDecryptTextActionPerformed

    private void jButtonDecryptFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDecryptFileActionPerformed
        if (!loadKey()) {
            return;
        }

        FileContent fileContent;
        try {
            JOptionPane.showMessageDialog(this, "Proszę wskazać plik do odszyfrowania");
            fileContent = retrieveFileContent();
            if (fileContent == null) {
                return;
            }

            File outputFile = new File(fileContent.getFilePath() + "/"
                    + fileContent.getFileName().replace("_encrypted", "_decrypted.") + fileContent.getFileExtension());

            FileUtils.writeByteArrayToFile(outputFile, algorithm.decrypt(fileContent.getBinaryConent()));
            JOptionPane.showMessageDialog(this, "Plik po deszyfracji: " + outputFile.getAbsolutePath());
        } catch (IOException ex) {
            Logger.getLogger(AlgorithmGUI.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "Wystąpił błąd podczas wczytywania pliku");
        }
    }//GEN-LAST:event_jButtonDecryptFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AlgorithmGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AlgorithmGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AlgorithmGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AlgorithmGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AlgorithmGUI().setVisible(true);
            }
        });
    }

    private IAlgorithm algorithm;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private kryptografia.gui.EncryptedTextArea encryptedTextArea1;
    private javax.swing.JButton jButtonDecryptFile;
    private javax.swing.JButton jButtonDecryptText;
    private javax.swing.JButton jButtonEncryptFile;
    private javax.swing.JButton jButtonEncryptText;
    private javax.swing.JLabel jLabelInputText;
    private javax.swing.JLabel jLabelOutputText;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTextAreaInputText;
    private kryptografia.gui.EncryptedTextArea jTextAreaOutputText;
    // End of variables declaration//GEN-END:variables
}
