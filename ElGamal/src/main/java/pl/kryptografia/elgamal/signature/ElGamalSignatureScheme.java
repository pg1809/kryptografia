package pl.kryptografia.elgamal.signature;

import java.math.BigInteger;
import pl.kryptografia.elgamal.bignum.BigNum;
import pl.kryptografia.elgamal.calculation.EuclideanSolver;
import pl.kryptografia.elgamal.io.BigNumsToBytesConverter;
import pl.kryptografia.elgamal.io.BytesToBigNumsConverter;

/**
 *
 */
public class ElGamalSignatureScheme implements SignatureScheme {

//    private final static PrimeGenerator primeGenerator = PrimeGenerator.getInstance();
    private final static EuclideanSolver euclideanSolver = EuclideanSolver.getInstance();

    private final static BigNumsToBytesConverter toBytesConverter = new BigNumsToBytesConverter();

    private final static BytesToBigNumsConverter toBigNumsConverter = new BytesToBigNumsConverter();

    private final PublicKey publicKey = new PublicKey();

    private final BigNum primeMinusOne;

    private final BigNum privateKey = new BigNum();

    public static BigInteger bi(BigNum x) {
        BigInteger result = new BigInteger(x.toString(), 2);
        if (x.getSign() == -1) {
            return result.negate();
        }
        return result;
    }

    public ElGamalSignatureScheme() {
//        BigNum q = new BigNum();
//        q.randomize(BigNum.BLOCKS / 2);
//        // p = 2 * q + 1
//        // that means q should have the first bit equal to zero not to overflow
//        q.setBit(BigNum.BITS / 2 - 1, 0);
//        // q should be odd because this is required by primeGenerator
//        q.setBit(BigNum.BITS - 1, 1);
//
//        Pair safePrimeWithGenerator = primeGenerator.generateSafePrimeWithGenerator(q);
//        publicKey.prime = safePrimeWithGenerator.first;
//        publicKey.generator = safePrimeWithGenerator.second;

        String prime
        for (int i = 0; i < prime.length(); ++i) {
            if (prime.charAt(i) == '0') {
                publicKey.prime.setBit(i, 0);
            } else {
                publicKey.prime.setBit(i, 1);
            }
        }
        primeMinusOne = new BigNum(publicKey.prime);
        primeMinusOne.subtract(BigNum.ONE);

        publicKey.generator = new BigNum(BigNum.TWO);

        do {
            privateKey.randomize(BigNum.BLOCKS / 2);
        } while (!primeMinusOne.absGreaterThan(privateKey) || !privateKey.absGreaterThan(BigNum.ONE));

        publicKey.y = new BigNum(publicKey.generator);
        publicKey.y.powerModulo(privateKey, publicKey.prime);
    }

    @Override
    public byte[] sign(byte[] originalMessage) {
        BigNum k = new BigNum();
        BigNum divisor;
        do {
            k.randomize(BigNum.BLOCKS / 2);
            divisor = new BigNum(k);
            divisor.gcd(primeMinusOne);
        } while (!divisor.equals(BigNum.ONE) || !primeMinusOne.absGreaterThan(k)
                || !k.absGreaterThan(BigNum.ONE));

        BigNum r = new BigNum(publicKey.generator);
        r.powerModulo(k, publicKey.prime);

        BigNum kInverse = euclideanSolver.inverseModulo(k, primeMinusOne);

        BigNum digest = hash(originalMessage);

        BigNum s = new BigNum(privateKey);
        s.multiply(r);
        s.modulo(primeMinusOne);
        s.setSign(-1);
        s.add(digest);
        s.modulo(primeMinusOne);
        s.multiply(kInverse);
        s.modulo(primeMinusOne);

        BigNum[] signature = new BigNum[]{r, s};
        return toBytesConverter.bigNumArrayToBytes(signature);
    }

    @Override
    public boolean verify(byte[] originalMessage, byte[] signature) {
        BigNum[] decodedSignature = toBigNumsConverter.convert(signature);
        BigNum r = decodedSignature[0];
        BigNum s = decodedSignature[1];

        if (!r.absGreaterOrEqualTo(BigNum.ONE) || !primeMinusOne.absGreaterOrEqualTo(r)) {
            return false;
        }

//        BigInteger R = bi(r);
//        BigInteger S = bi(s);
//        BigInteger Y = bi(publicKey.y);
//        BigInteger P = bi(publicKey.prime);
//        BigInteger G = bi(publicKey.generator);
//        
//        BigInteger V1 = Y.modPow(R, P).multiply(R.modPow(S, P)).mod(P);
//        BigInteger V2 = G.modPow(bi(hash(originalMessage)), P);
//        
//        System.out.println(V1);
//        System.out.println(V2);
//        
//        System.out.println(V1.equals(V2));

        BigNum exponentY = new BigNum(publicKey.y);
        exponentY.powerModulo(r, publicKey.prime);

        BigNum exponentR = new BigNum(r);
        exponentR.powerModulo(s, publicKey.prime);

        exponentY.multiply(exponentR);
        exponentY.modulo(publicKey.prime);

        BigNum digest = hash(originalMessage);
        BigNum pattern = new BigNum(publicKey.generator);
        pattern.powerModulo(digest, publicKey.prime);

        return (exponentY.equals(pattern));
    }

    private BigNum hash(byte[] originalMessage) {
        return new BigNum(2342379329066671238L, BigNum.BLOCKS - 2);
    }
}
