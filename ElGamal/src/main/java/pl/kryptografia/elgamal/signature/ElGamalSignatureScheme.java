package pl.kryptografia.elgamal.signature;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.logging.Level;
import java.util.logging.Logger;
import pl.kryptografia.elgamal.bignum.BigNum;
import pl.kryptografia.elgamal.calculation.EuclideanSolver;
import pl.kryptografia.elgamal.io.BigNumsToBytesConverter;
import pl.kryptografia.elgamal.io.BytesToBigNumsConverter;

/**
 *
 */
public class ElGamalSignatureScheme implements SignatureScheme {

    private final static EuclideanSolver euclideanSolver = EuclideanSolver.getInstance();

    private final static BigNumsToBytesConverter toBytesConverter = new BigNumsToBytesConverter();

    private final static BytesToBigNumsConverter toBigNumsConverter = new BytesToBigNumsConverter();

    private final PublicKey publicKey = new PublicKey();

    private final BigNum primeMinusOne;

    private final BigNum privateKey = new BigNum();

    public static BigInteger bi(BigNum x) {
        BigInteger result = new BigInteger(x.toString(), 2);
        if (x.getSign() == -1) {
            return result.negate();
        }
        return result;
    }

    public ElGamalSignatureScheme() {
        // parameters below were generated using a separate project "Generator"
        String prime
        publicKey.prime.initializeFromBinaryString(prime);
        
        // we often use (p - 1) so we precompute it
        // it is also the order of multiplicative group Zp
        primeMinusOne = new BigNum(publicKey.prime);
        primeMinusOne.subtract(BigNum.ONE);

        String generator
        publicKey.generator.initializeFromBinaryString(generator);

        // private key is a random number: 1 <= a < p - 1
        String privateKeyString
        privateKey.initializeFromBinaryString(privateKeyString);

        // y = generator^a mod p
        String y
        publicKey.y.initializeFromBinaryString(y);
        
        // (p, generator, y) is the public key
        // a is the private key
    }

    @Override
    public byte[] sign(byte[] originalMessage) {
        BigNum k = new BigNum();
        BigNum divisor = null;

        // we need a random number: 1 <= k < p - 1
        // k should be coprime with (p - 1), i. e. gcd(k, p - 1) = 1
        // it is crucial to use different k for every signing, otherwise the 
        // private key can be determined with high probability
        do {
            k.randomize(BigNum.BLOCKS / 2);
            if (!primeMinusOne.absGreaterThan(k) || !k.absGreaterThan(BigNum.ONE)) {
                continue;
            }
            
            divisor = new BigNum(k);
            divisor.gcd(primeMinusOne);
        } while (!divisor.equals(BigNum.ONE));

        // signature is the pair (r, s)
        BigNum r = new BigNum(publicKey.generator);
        r.powerModulo(k, publicKey.prime);

        BigNum kInverse = euclideanSolver.inverseModulo(k, primeMinusOne);

        BigNum digest = hash(originalMessage);

        BigNum s = new BigNum(privateKey);
        s.multiply(r);
        s.modulo(primeMinusOne);
        s.setSign(-1);
        s.add(digest);
        s.modulo(primeMinusOne);
        s.multiply(kInverse);
        s.modulo(primeMinusOne);

        BigNum[] signature = new BigNum[]{r, s};
        return toBytesConverter.bigNumArrayToBytes(signature);
    }

    @Override
    public boolean verify(byte[] originalMessage, byte[] signature) {
        BigNum[] decodedSignature = toBigNumsConverter.convert(signature);
        BigNum r = decodedSignature[0];
        BigNum s = decodedSignature[1];

        // r = generator^k mod p
        // it means that 1 <= r <= p - 1
        if (!r.absGreaterOrEqualTo(BigNum.ONE) || !primeMinusOne.absGreaterOrEqualTo(r)) {
            return false;
        }

        BigNum exponentY = new BigNum(publicKey.y);
        exponentY.powerModulo(r, publicKey.prime);

        BigNum exponentR = new BigNum(r);
        exponentR.powerModulo(s, publicKey.prime);

        exponentY.multiply(exponentR);
        exponentY.modulo(publicKey.prime);

        BigNum digest = hash(originalMessage);
        BigNum pattern = new BigNum(publicKey.generator);
        pattern.powerModulo(digest, publicKey.prime);

        return (exponentY.equals(pattern));
    }

    /**
     * Computes the digest of the original message.
     * 
     * Original ElGamal signature scheme computes the signature for original 
     * message. It may lead to existential forgery attack and to prevent it we
     * sign the message digest.
     * 
     * @param originalMessage Original message to be signed.
     * @return SHA-256 hash of the message.
     */
    private BigNum hash(byte[] originalMessage) {
        try {
            MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
            byte[] digest = messageDigest.digest(originalMessage);
            byte[] paddedDigest = new byte[BytesToBigNumsConverter.BYTES_PER_BIGNUM];
            for (int i = 0; i < digest.length; ++i) {
                paddedDigest[paddedDigest.length - digest.length + i] = digest[i];
            }
            return toBigNumsConverter.convert(paddedDigest)[0];
        } catch (NoSuchAlgorithmException ex) {
            Logger.getLogger(ElGamalSignatureScheme.class.getName()).log(Level.SEVERE, null, ex);
        }

        return null;
    }
}
